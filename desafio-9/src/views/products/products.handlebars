<div class="d-flex justify-content-center align-items-center vh-100">
  <div class="bg-white rounded p-3 product-list flex-column align-items-center shadow">
    <h1 class="text-dark">Product List</h1>
    <ul class="list-group">
      {{#each products}}
      <li class="list-group-item text-dark d-flex justify-content-between align-items-center">
        <span class="mr-3">{{this.title}}</span>
        <div>
          <a href="/products/{{this.id}}" class="btn btn-primary btn-sm">View Details</a>
          <a href="#" class="btn btn-success btn-sm ml-2 add-to-cart" data-product-id="{{this.id}}">Add to
            Cart</a>
        </div>
      </li>
      {{/each}}
      <form id="productForm" class="mt-3">
        <div class="form-group">
          <input type="text" class="form-control" id="title" placeholder="Title" required>
        </div>
        <div class="form-group">
          <input type="text" class="form-control" id="code" placeholder="Code" required>
        </div>
        <div class="form-group">
          <input type="number" class="form-control" id="price" placeholder="Price" required>
        </div>
        <button type="submit" class="btn btn-primary">Add Product</button>
      </form>
    </ul>

    <div class="mt-3">
      <nav aria-label="Page navigation">
        <ul class="pagination justify-content-center">
          {{#if hasPrevPage}}
          <li class="page-item">
            <a class="page-link text-black" href="{{prevPageLink}}" aria-label="Previous">
              <span aria-hidden="true">&laquo;</span>
              {{page}}
            </a>
          </li>
          {{/if}}

          {{#if hasNextPage}}
          <p class="text-white">batata</p>
          <li class="page-item">
            <a class="page-link text-black" href="{{nextPageLink}}" aria-label="Next">
              {{page}}
              <span aria-hidden="true">&raquo;</span>
            </a>
          </li>
          {{/if}}
        </ul>
      </nav>
    </div>
  </div>
</div>

<script>

  const addToCartButtons = document.querySelectorAll('.add-to-cart');
  addToCartButtons.forEach(button => {
    button.addEventListener('click', (event) => {
      const productId = event.target.getAttribute('data-product-id');
    });
  });

const productForm = document.getElementById("productForm");
productForm.addEventListener("submit", async function (event) {
  event.preventDefault(); 

  const title = document.getElementById("title").value;
  const code = document.getElementById("code").value;
  const price = parseFloat(document.getElementById("price").value);

  if (!title || !code || isNaN(price) || price <= 0) {
    alert("Por favor, ingrese información válida.");
    return;
  }

  const productData = {
    title: title,
    code: code,
    price: price,
  };

  try {
    const response = await fetch("/api/products", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(productData),
    });

    if (response.status === 201) {
      document.getElementById("title").value = "";
      document.getElementById("code").value = "";
      document.getElementById("price").value = "";
    } else {
      alert("Error al agregar el producto. Verifique los datos y vuelva a intentarlo.");
    }
  } catch (error) {
    console.error("Error al realizar la solicitud POST:", error);
  }
});

</script>